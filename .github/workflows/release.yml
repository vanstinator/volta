on:
  push:
    tags:
      - v*
  pull_request:
    branches:
      - main

name: Production

jobs:
  centos:
    name: Build - CentOS / RHEL
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: ./ci/docker/Dockerfile.centos6
          load: true
          push: false
          tags: volta
          target: base
      - name: Compile and package Volta
        run: docker run --volume ${PWD}:/root/workspace --workdir /root/workspace --rm --init --tty volta /root/workspace/ci/build-and-package.sh volta-centos
      - name: Confirm correct OpenSSL Version
        run: |
          objdump -p target/release/volta
          readelf -d target/release/volta
      - name: Upload release artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-centos
          path: target/release/volta-centos.tar.gz

  linux:
    strategy:
      matrix:
        arch: [x86_64, arm64]
        openssl: [1_0_1, 1_1_1]
        os: [linux]
        include:
        - arch: x86_64
          dockerfile: Dockerfile.centos6
          # Docker's BuildX platform for x86_64 is `amd64`. But `uname -m` on linux returns x86_64.
          # So we'll officially designate this binary as `x86_64` but map it here to `amd64` so that
          # we build it on the correct docker arch
          dockerArch: amd64
        - arch: arm64
          dockerfile: Dockerfile.centos8
          dockerArch: arm64

    name: Build - OpenSSL ${{ matrix.openssl }} - Arch ${{ matrix.arch }}
    runs-on: ubuntu-latest
    steps:
      
      - name: Check out code
        uses: actions/checkout@v2

      # Not stricly speaking necessary for x86 builds, but the QEMU arm64 builds take hours
      - name: Rust build cache
        id: cache-openssl
        uses: actions/cache@v2
        with:
          path: |
            .cargo/registry
            .cargo/git
            target/
          key: ${{ runner.os }}-${{ matrix.openssl }}-${{ matrix.arch }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.openssl }}-${{ matrix.arch }}-target-

      - name: Clean .git
        run: |
          rm -rf ./openssl/.git

      - name: Debug
        run: |
          echo $(ls -la)

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          build-args: |
            OPENSSL_VERSION=${{ matrix.openssl }}
          cache-from: type=gha,scope=${{ matrix.openssl }}-${{ matrix.arch }}
          cache-to: type=gha,scope=${{ matrix.openssl }}-${{ matrix.arch }},mode=max
          context: .
          file: ./ci/docker/${{ matrix.dockerfile }}
          load: true
          platforms: linux/${{ matrix.dockerArch }}
          push: false
          tags: volta-${{ matrix.openssl }}-${{ matrix.arch }}
          target: openssl-${{ matrix.openssl }}

      - name: Compile and package OpenSSL & Volta
        run: docker run --volume ${PWD}:/root/workspace --platform linux/${{ matrix.dockerArch }} --workdir /root/workspace --rm --init --tty volta-${{ matrix.openssl }}-${{ matrix.arch }} /root/workspace/ci/build-with-openssl.sh volta-openssl-${{ matrix.openssl }}-${{ matrix.arch }}
      
      - name: Set .cargo/ ownership to current user
        run: sudo chown -R $(id -u):$(id -g) .cargo/

      - name: Confirm OpenSSL Version
        run: |
          objdump -p target/release/volta
          readelf -d target/release/volta

      - name: Upload release artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-openssl-${{ matrix.openssl }}
          path: target/release/volta-openssl-${{ matrix.openssl }}-${{ matrix.arch }}.tar.gz

  macos:
    name: Build - MacOS
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Compile and package Volta
        run: ./ci/build-and-package.sh volta-macos
      - name: Upload release artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos
          path: target/release/volta-macos.tar.gz

  macos-aarch64:
    name: Build - MacOS (ARM)
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: aarch64-apple-darwin
          override: true
      - name: Compile and package Volta
        run: ./ci/build-for-arm.sh volta-macos-aarch64
      - name: Upload release artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos-aarch64
          path: target/aarch64-apple-darwin/release/volta-macos-aarch64.tar.gz

  windows:
    name: Build - Windows
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Add cargo-wix subcommand
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-wix
      - name: Compile and package installer
        uses: actions-rs/cargo@v1
        with:
          command: wix
          args: --nocapture --package volta --output target\wix\volta-windows.msi
      - name: Load Certificate File
        id: certificate_file
        if: github.event_name == 'push'
        uses: timheuer/base64-to-file@v1
        with:
          fileName: "volta-certificate.pfx"
          encodedString: ${{ secrets.INSTALLER_CERTIFICATE }}
      - name: Sign Installer
        if: github.event_name == 'push'
        env:
          CERTIFICATE_FILE: ${{ steps.certificate_file.outputs.filePath }}
          CERTIFICATE_PASSWORD: ${{ secrets.INSTALLER_CERTIFICATE_PASSWORD }}
        run: |
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x86\signtool.exe" sign /fd sha256 /f "$env:CERTIFICATE_FILE" /p "$env:CERTIFICATE_PASSWORD" /tr http://ts.ssl.com /td sha256 /d "Volta: Start Your Engines" /du "https://volta.sh" "target\wix\volta-windows.msi"
      - name: Verify Signature
        if: github.event_name == 'push'
        run: |
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x86\signtool.exe" verify /pa "target\wix\volta-windows.msi"
      - name: Create zip of binaries
        run: powershell Compress-Archive volta*.exe volta-windows.zip
        working-directory: ./target/release
      - name: Upload installer
        uses: actions/upload-artifact@v2
        with:
          name: windows-installer
          path: target/wix/volta-windows.msi
      - name: Upload zip
        uses: actions/upload-artifact@v2
        with:
          name: windows-zip
          path: target/release/volta-windows.zip

  release:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - centos
      - linux
      - macos
      - macos-aarch64
      - windows
    if: github.event_name == 'push'
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Determine release version
        id: release_info
        env:
          TAG: ${{ github.ref }}
        run: echo "::set-output name=version::${TAG:11}"
      - name: Fetch CentOS artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-centos
          path: release
      - name: Fetch OpenSSL 1.0.*-x86_64 artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-openssl-1_0_1-x86_64
          path: release
      - name: Fetch OpenSSL 1.0.*-arm64 artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-openssl-1_0_1-arm64
          path: release
      - name: Fetch OpenSSL 1.1.*-x86_64 artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-openssl-1_1_0-x86_64
          path: release
      - name: Fetch OpenSSL 1.1.*-arm64 artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-openssl-1_1_0-arm64
          path: release
      - name: Fetch MacOS artifact
        uses: actions/download-artifact@v2
        with:
          name: macos
          path: release
      - name: Fetch MacOS (ARM) artifact
        uses: actions/download-artifact@v2
        with:
          name: macos-aarch64
          path: release
      - name: Fetch Windows installer
        uses: actions/download-artifact@v2
        with:
          name: windows-installer
          path: release
      - name: Fetch Windows zip
        uses: actions/download-artifact@v2
        with:
          name: windows-zip
          path: release
      - name: Show release artifacts
        run: ls -la release
      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
      - name: Upload CentOS artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-centos.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-linux-openssl-rhel.tar.gz
          asset_content_type: applictaion/gzip
      - name: Upload OpenSSL 1.0.*-amd64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-openssl-1_0_1-amd64.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-linux-openssl-1.0-amd64.tar.gz
          asset_content_type: applictaion/gzip
      - name: Upload OpenSSL 1.0.*-arm64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-openssl-1_0_1-arm64.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-linux-openssl-1.0-arm64.tar.gz
          asset_content_type: applictaion/gzip
      - name: Upload OpenSSL 1.1.*-amd64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-openssl-1_1_0-amd64.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-linux-openssl-1.1-amd64.tar.gz
          asset_content_type: applictaion/gzip
      - name: Upload OpenSSL 1.1.*-arm64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-openssl-1_1_0-arm64.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-linux-openssl-1.1-arm64.tar.gz
          asset_content_type: applictaion/gzip 
      - name: Upload MacOS artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-macos.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-macos.tar.gz
          asset_content_type: applictaion/gzip
      - name: Upload MacOS (ARM) artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-macos-aarch64.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-macos-aarch64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Windows installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-windows.msi
          asset_name: volta-${{ steps.release_info.outputs.version }}-windows-x86_64.msi
          asset_content_type: applictaion/x-msi
      - name: Upload Windows zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/volta-windows.zip
          asset_name: volta-${{ steps.release_info.outputs.version }}-windows.zip
          asset_content_type: application/zip
      - name: Upload manifest file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ci/volta.manifest
          asset_name: volta.manifest
          asset_content_type: text/plain
